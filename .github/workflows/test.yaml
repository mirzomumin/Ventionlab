name: workflow_2

on:
  workflow_run:
    workflows: [workflow_1]
    types: [completed]
    branches: [dev]


env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ vars.SECRET_KEY }}
      DEBUG: ${{ vars.DEBUG }}
      ALLOWED_HOSTS: ${{ vars.ALLOWED_HOSTS }}
      CORS_ALLOWED_ORIGINS: ${{ vars.CORS_ALLOWED_ORIGINS }}
      POSTGRES_DB: ${{ vars.POSTGRES_DB }}
      POSTGRES_USER: ${{ vars.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
      DB_HOST: ${{ vars.DB_HOST }}
      DB_PORT: ${{ vars.DB_PORT }}
      CHANNEL_HOST: ${{ vars.CHANNEL_HOST }}
      CHANNEL_PORT: ${{ vars.CHANNEL_PORT }}
    services:
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - ${{ vars.CHANNEL_PORT }}:${{ vars.CHANNEL_PORT }}

      postgres:
        # Docker Hub image
        image: postgres:14
        env:
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
        ports:
          - ${{ vars.DB_PORT }}:${{ vars.DB_PORT }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Set up python3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        working-directory: ./backend
        run: |
          apt-get update && apt-get install -y curl
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="${PATH}:/root/.local/bin"
          poetry config virtualenvs.create false && \
          poetry install --only dev --no-interaction --no-ansi

      - name: Test with pytest
        working-directory: ./backend
        id: test
        run: |
          coverage run -m pytest

      - name: Coverage report
        working-directory: ./backend
        run: |
          coverage report -m

      - name: automerge
        id: automerge
        uses: "pascalgn/automerge-action@v0.16.2"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_LABELS: ""

      - name: Retrieve PR url
        run: |
          echo "PR_URL=$(gh pr view dev --json url | grep -Po '(?<="url":")[^"\\]*(?:\\.[^"\\]*)*')" >> $GITHUB_ENV

      - name: Check if PR already exists
        id: check
        run: |
          prs=$(gh pr list \
            --repo "$GITHUB_REPOSITORY" \
            --head 'test' \
            --base 'master' \
            --json title \
            --jq 'length')
          if ((prs > 0)); then
              echo "skip=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Create Pull Request
        if: '!steps.check.outputs.skip'
        run: |
          gh pr create -B master -H test --title 'Merge test into master' --body "${{ env.PR_URL }}" -r 'mirzomumin,abduvohidd'
